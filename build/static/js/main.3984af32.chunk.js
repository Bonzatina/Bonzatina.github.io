(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{12:function(e,t,n){e.exports=n(20)},18:function(e,t,n){},19:function(e,t,n){},20:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),s=n(5),l=n.n(s),c=(n(18),n(3)),i=n(2),o=n(6),h=n(7),p=n(11),u=n(8),d=n(10),g=n(1),y=(n(19),n(9)),m=function(e,t){for(var n=e.replace(/ /g,"_").split(""),r=t.length,a=[],s=0;s<t.length;s++)a[s]=[];n.map(function(e,t,n){var s=2*r-2;t<n.length&&t%s<s&&(t%s<r?a[t%s].push(e):a[s-t%s].push(e))});for(var l=t.split(""),c=[],i=0;i<l.length;i++)c[i]=a[l[i]-1];return c},f=function(e,t){var n=e.replace(/_/g," ").split(""),r=v(n,t),a=[];return w(a,r,0),a},v=function(e,t){var n=[],r=2*t.length-2,a=[],s=Math.floor(e.length/r),l=2*Math.floor(e.length/r),c=t.length-2;a.push(s);for(var i=0;i<c;i++)a.push(l);e.length%r&&(a=a.map(function(t,n){return n<e.length-1&&(t+=1),a[n]=t}));var o=e.length-a.reduce(function(e,t){return e+t});a.push(o);for(var h=t.split(""),p=[],u=0;u<h.length;u++)p[u]=a[h[u]-1];p.reduce(function(t,r){var a=e.slice(t,t+r);return n.push(a),t+r},0);for(var d=[],g=0;g<h.length;g++)d[h[g]-1]=n[g];return d},w=function e(t,n,r){if(0===r)for(var a=0;a<n.length;a++)t.push(n[a][0]),n[a]=n[a].slice(1);else for(var s=n.slice(1),l=0;l<s.length;l++)s[l][0]&&t.push(s[l][0]),n[l+1]=n[l+1]&&n[l+1].slice(1);if(r<7)return e(t,n.reverse(),r+1)},_=function(e){function t(e){var n;return Object(o.a)(this,t),(n=Object(p.a)(this,Object(u.a)(t).call(this,e))).state={encrypt:{task_text:"",result_text:"",key:""},decrypt:{task_text:"",result_text:"",key:""},error:!1},n.updatePlainText=n.updatePlainText.bind(Object(g.a)(Object(g.a)(n))),n.updateCipherText=n.updateCipherText.bind(Object(g.a)(Object(g.a)(n))),n.cryptHandler=n.cryptHandler.bind(Object(g.a)(Object(g.a)(n))),n.updatePlainKey=n.updatePlainKey.bind(Object(g.a)(Object(g.a)(n))),n.updateCipherKey=n.updateCipherKey.bind(Object(g.a)(Object(g.a)(n))),n}return Object(d.a)(t,e),Object(h.a)(t,[{key:"updatePlainText",value:function(e){this.setState({encrypt:Object(i.a)({},this.state.encrypt,{task_text:e.target.value})})}},{key:"updateCipherText",value:function(e){this.setState({decrypt:Object(i.a)({},this.state.decrypt,{task_text:e.target.value})})}},{key:"updatePlainKey",value:function(e){this.setState({encrypt:Object(i.a)({},this.state.encrypt,{key:e.target.value})})}},{key:"updateCipherKey",value:function(e){this.setState({decrypt:Object(i.a)({},this.state.decrypt,{key:e.target.value})})}},{key:"cryptHandler",value:function(e){var t=function(e){return e.text.length?e.key.length?e.text.length<e.key.length?"Text should be longer than number or rows":Math.max.apply(Math,Object(y.a)(e.key.split("")))>e.key.length&&"Row id could not be greater than number of rows":"You should provide key":"You should provide text"}({text:this.state[e].task_text,key:this.state[e].key});if(t)this.setState(Object(c.a)({},e,Object(i.a)({},this.state[e],{error:t})));else{var n=("encrypt"===e?m:f)(this.state[e].task_text,this.state[e].key);console.log(n),this.setState(Object(c.a)({},e,Object(i.a)({},this.state[e],{result_text:n,error:!1})))}}},{key:"renderZigZag",value:function(e,t){for(var n=[],r=t.split(""),s=[],l=0;l<r.length;l++)s[r[l]-1]=e[l];return console.log(s),s.map(function(t,r,s){var l=[];t.map(function(t,n,c){var i=2*s.length-2-1;if(console.log(n%2),0===n){for(var o=0;o<r;o++)l.push(a.a.createElement("div",{className:"zigzag_cell"}));l.push(a.a.createElement("div",{className:"zigzag_cell"},t))}else if(n%2&&r!==s.length-1){for(var h=0;h<i-2*r;h++)l.push(a.a.createElement("div",{className:"zigzag_cell"}));l.push(a.a.createElement("div",{className:"zigzag_cell"},t))}else if(n%2===0&&0===r){for(var p=0;p<i-2*r;p++)l.push(a.a.createElement("div",{className:"zigzag_cell"}));l.push(a.a.createElement("div",{className:"zigzag_cell"},t))}else{for(var u=0;u<2*r-1;u++)l.push(a.a.createElement("div",{className:"zigzag_cell"}));l.push(a.a.createElement("div",{className:"zigzag_cell"},t))}if(n===c.length-1)for(var d=[].concat.apply([],e).join("").length,g=l.length;g<d;g++)l.push(a.a.createElement("div",{className:"zigzag_cell"}))}),n.push(a.a.createElement("div",{className:"zigzag_row"},l))}),n}},{key:"render",value:function(){var e=this;return a.a.createElement("div",{className:"App"},a.a.createElement("header",{className:"main"},a.a.createElement("div",{className:"encrypt_block"},a.a.createElement("p",null,"read this please"),a.a.createElement("input",{placeholder:"Type plain text",value:this.state.encrypt.task_text,onChange:this.updatePlainText}),a.a.createElement("input",{placeholder:"Type key",value:this.state.encrypt.key,onChange:this.updatePlainKey}),a.a.createElement("button",{onClick:function(){return e.cryptHandler("encrypt")}},"Encrypt"),this.state.encrypt.error&&a.a.createElement("div",{className:"error"},this.state.encrypt.error),a.a.createElement("div",{className:"result_text"},this.state.encrypt.result_text),a.a.createElement("div",{className:"zigzag_text"},this.state.encrypt.result_text&&this.renderZigZag(this.state.encrypt.result_text,this.state.encrypt.key)),a.a.createElement("div",null,a.a.createElement("pre",null,"\n    const formatted = text.replace(/ /g, '_').split('');\n    const number_of_rows = key.length;\n    const rows = []\n    for (let i = 0; i < key.length; i++) {\n        rows[i] = []\n    }\n    formatted.map((el, ind, arr) => {\n        const cycle = number_of_rows * 2 - 2;\n        if (ind < arr.length && ind % cycle < cycle) {\n            if (ind % cycle < number_of_rows) {\n                rows[ind % cycle].push(el)\n            }\n            else {\n                rows[cycle - ind % cycle].push(el)\n            }\n        }\n    });\n"))),a.a.createElement("div",{className:"decrypt_block"},a.a.createElement("p",{className:"false_dot"}," ."),a.a.createElement("input",{placeholder:"Type cipher text",value:this.state.decrypt.task_text,onChange:this.updateCipherText}),a.a.createElement("input",{placeholder:"Type key",value:this.state.decrypt.key,onChange:this.updateCipherKey}),a.a.createElement("button",{onClick:function(){return e.cryptHandler("decrypt")}},"Decrypt"),this.state.decrypt.error&&a.a.createElement("div",{className:"error"},this.state.decrypt.error),a.a.createElement("div",{className:"result_text"},this.state.decrypt.result_text),a.a.createElement("div",{className:"zigzag_text"}),a.a.createElement("div",null,a.a.createElement("pre",null,"\nconst recursiveDecrypt = (plain_text, cipherRows, count) => {\n    if (count === 0) {\n        for (let i = 0; i < cipherRows.length; i++) {\n            plain_text.push(cipherRows[i][0])\n            cipherRows[i] = cipherRows[i].slice(1)\n        }\n    }\n    else {\n        const tmpSlicedCipherRows = cipherRows.slice(1);\n        for (let i = 0; i < tmpSlicedCipherRows.length; i++) {\n            tmpSlicedCipherRows[i][0] && plain_text.push(tmpSlicedCipherRows[i][0])\n            cipherRows[i + 1] = cipherRows[i + 1] && cipherRows[i + 1].slice(1)\n        }\n    }\n    if (count < 7) {\n        return recursiveDecrypt(plain_text, cipherRows.reverse(), count + 1)\n    }\n};\n\n\nconst sliceCipherText = (cipher_text, key) => {\n    const result = [];\n    const cycle = key.length * 2 - 2;\n    let rowsLength = [];\n    const firstRowLength = Math.floor(cipher_text.length / cycle);\n\n    const middleRowsLength = Math.floor(cipher_text.length / cycle) * 2;\n    const numberOfMiddleRows = key.length - 2;\n\n    rowsLength.push(firstRowLength);\n    for (let i = 0; i < numberOfMiddleRows; i++) {\n        rowsLength.push(middleRowsLength)\n    }\n    if (cipher_text.length % cycle) {\n        rowsLength = rowsLength.map((el, ind) => {\n            if (ind < cipher_text.length - 1) {\n                el += 1;\n            }\n            return rowsLength[ind] = el;\n        })\n    }\n    const lastRowLength = cipher_text.length - rowsLength.reduce((acc, currentValue)\n        => acc + currentValue);\n    rowsLength.push(lastRowLength);\n\n    const sortingKeys = key.split('');\n    const sortedRowsLength = [];\n    for (let i = 0; i < sortingKeys.length; i++) {\n        sortedRowsLength[i] = rowsLength[sortingKeys[i] - 1];\n    }\n\n\n    sortedRowsLength.reduce((acc, currentValue) => {\n        // console.log(acc)\n        const row = cipher_text.slice(acc, acc + currentValue);\n        // console.log(row)\n        result.push(row);\n        return acc + currentValue\n    }, 0);\n\n    const sortedResult = [];\n    for (let i = 0; i < sortingKeys.length; i++) {\n        sortedResult[sortingKeys[i] - 1] = result[i];\n    }\n\n    return sortedResult;\n};\n")),a.a.createElement("div",null))))}}]),t}(r.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));l.a.render(a.a.createElement(_,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[12,1,2]]]);
//# sourceMappingURL=main.3984af32.chunk.js.map