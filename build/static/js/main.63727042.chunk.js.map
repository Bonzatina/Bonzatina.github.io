{"version":3,"sources":["RedefenceScripts.js","App.js","code_examples.js","serviceWorker.js","index.js"],"names":["encrypt","text","key","formatted","replace","split","number_of_rows","length","rows","i","map","el","ind","arr","cycle","push","sortingKeys","sortedRows","decrypt","cipherRows","sliceCipherText","plain_text","recursiveDecrypt","cipher_text","result","rowsLength","firstRowLength","Math","floor","middleRowsLength","numberOfMiddleRows","lastRowLength","reduce","acc","currentValue","sortedRowsLength","row","slice","sortedResult","firstRow","arguments","undefined","totalLength","concat","apply","join","console","log","tmpSlicedCipherRows","reverse","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","task_text","result_text","error","zigzag_text","updatePlainText","bind","assertThisInitialized","updateCipherText","cryptHandler","updatePlainKey","updateCipherKey","event","setState","objectSpread","target","value","type","_this2","validationResult","data","max","toConsumableArray","validate","defineProperty","cryptText","renderZigZag","divs","ind_parent","arr_parent","divsRow","el_child","ind_child","arr_child","react_default","a","createElement","className","_this3","placeholder","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63727042.chunk.js","sourcesContent":["export const encrypt = (text, key) => {\n    const formatted = text.replace(/ /g, '_').split('');\n    const number_of_rows = key.length;\n    const rows = []\n    for (let i = 0; i < key.length; i++) {\n        rows[i] = []\n    }\n\n    formatted.map((el, ind, arr) => {\n        const cycle = number_of_rows * 2 - 2;\n        if (ind < arr.length && ind % cycle < cycle) {\n            if (ind % cycle < number_of_rows) {\n                rows[ind % cycle].push(el)\n            }\n            else {\n                rows[cycle - ind % cycle].push(el)\n            }\n        }\n    });\n\n    const sortingKeys = key.split('');\n    const sortedRows = [];\n    for (let i = 0; i < sortingKeys.length; i++) {\n        sortedRows[i] = rows[sortingKeys[i] - 1];\n    }\n    // console.log(sortedRows)\n    return sortedRows;\n};\n\nexport const decrypt = (text, key) => {\n    const formatted = text.replace(/_/g, ' ').split('');\n    const cipherRows = sliceCipherText(formatted, key);\n    const plain_text = [];\n\n    recursiveDecrypt(plain_text, cipherRows);\n\n    return plain_text;\n};\n\nconst sliceCipherText = (cipher_text, key) => {\n    const result = [];\n    const cycle = key.length * 2 - 2;\n    let rowsLength = [];\n    const firstRowLength = Math.floor(cipher_text.length / cycle);\n\n    const middleRowsLength = Math.floor(cipher_text.length / cycle) * 2;\n    const numberOfMiddleRows = key.length - 2;\n\n    rowsLength.push(firstRowLength);\n    for (let i = 0; i < numberOfMiddleRows; i++) {\n        rowsLength.push(middleRowsLength)\n    }\n    if (cipher_text.length % cycle) {\n        rowsLength = rowsLength.map((el, ind) => {\n            if (ind < cipher_text.length - 1) {\n                el += 1;\n            }\n            return rowsLength[ind] = el;\n        })\n    }\n    const lastRowLength = cipher_text.length - rowsLength.reduce((acc, currentValue) => acc + currentValue);\n    rowsLength.push(lastRowLength);\n\n    const sortingKeys = key.split('');\n    const sortedRowsLength = [];\n    for (let i = 0; i < sortingKeys.length; i++) {\n        sortedRowsLength[i] = rowsLength[sortingKeys[i] - 1];\n    }\n\n\n    sortedRowsLength.reduce((acc, currentValue) => {\n        // console.log(acc)\n        const row = cipher_text.slice(acc, acc + currentValue);\n        // console.log(row)\n        result.push(row);\n        return acc + currentValue\n    }, 0);\n\n    const sortedResult = [];\n    for (let i = 0; i < sortingKeys.length; i++) {\n        sortedResult[sortingKeys[i] - 1] = result[i];\n    }\n\n    return sortedResult;\n};\n\nconst recursiveDecrypt = (plain_text, cipherRows, firstRow = true) => {\n    const totalLength = [].concat.apply([], cipherRows).join('').length;\n    console.log(totalLength)\n    if (firstRow) {\n        for (let i = 0; i < cipherRows.length; i++) {\n            plain_text.push(cipherRows[i][0])\n            cipherRows[i] = cipherRows[i].slice(1)\n        }\n    }\n    else {\n        const tmpSlicedCipherRows = cipherRows.slice(1);\n        for (let i = 0; i < tmpSlicedCipherRows.length; i++) {\n            tmpSlicedCipherRows[i][0] && plain_text.push(tmpSlicedCipherRows[i][0])\n            cipherRows[i + 1] = cipherRows[i + 1] && cipherRows[i + 1].slice(1)\n        }\n    }\n    if (totalLength > 0) {\n        return recursiveDecrypt(plain_text, cipherRows.reverse(), false)\n    }\n};\n\nexport const validate = (data) => {\n    if (!data.text.length) {\n        return 'You should provide text';\n    }\n    if (!data.key.length) {\n        return 'You should provide key';\n    }\n    if (data.text.length < data.key.length) {\n        return 'Text should be longer than number or rows';\n    }\n    if (Math.max(...data.key.split('')) > data.key.length) {  // TODO https://www.jstips.co/en/javascript/calculate-the-max-min-value-from-an-array/\n        return 'Row id could not be greater than number of rows';\n    }\n    return false\n};\n\n\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport {encrypt, validate, decrypt} from './RedefenceScripts'\nimport {encrypt_code, recursive_ecrypt, slice_cipher_ext } from './code_examples'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            encrypt: {\n                task_text: '',\n                result_text: '',\n                key: '',\n            },\n            decrypt: {\n                task_text: '',\n                result_text: '',\n                key: '',\n            },\n            error: false,\n            zigzag_text: ''\n        };\n        this.updatePlainText = this.updatePlainText.bind(this);\n        this.updateCipherText = this.updateCipherText.bind(this);\n        this.cryptHandler = this.cryptHandler.bind(this);\n        this.updatePlainKey = this.updatePlainKey.bind(this);\n        this.updateCipherKey = this.updateCipherKey.bind(this);\n    }\n\n    updatePlainText(event) {\n        this.setState({\n            encrypt: {\n                ...this.state.encrypt,\n                task_text: event.target.value\n            }\n        });\n    }\n\n    updateCipherText(event) {\n        this.setState({\n            decrypt: {\n                ...this.state.decrypt,\n                task_text: event.target.value\n            }\n        });\n    }\n\n    updatePlainKey(event) {\n        this.setState({\n            encrypt: {\n                ...this.state.encrypt,\n                key: event.target.value\n            }\n        });\n    }\n\n    updateCipherKey(event) {\n        this.setState({\n            decrypt: {\n                ...this.state.decrypt,\n                key: event.target.value\n            }\n        });\n    }\n\n    cryptHandler(type) {\n        const data = {text: this.state[type].task_text, key: this.state[type].key};\n        // console.log(data)\n        const validationResult = validate(data);\n        if (!validationResult) {\n            const crypt = type === 'encrypt' ? encrypt : decrypt;\n            const cryptText = crypt(this.state[type].task_text, this.state[type].key);\n            // console.log(cryptText)\n            this.setState({\n                [type]: {\n                    ...this.state[type],\n                    result_text: cryptText,\n                    error: false\n                }\n            }, () => this.setState({zigzag_text: this.renderZigZag(this.state.encrypt.result_text, this.state.encrypt.key)}))\n        }\n        else {\n            this.setState({\n                [type]: {\n                    ...this.state[type],\n                    error: validationResult\n                },\n            })\n        }\n    }\n\n    renderZigZag(result_text, key) {\n        const divs = [];\n        const sortingKeys = key.split('');\n        const sortedRows = [];\n\n        for (let i = 0; i < sortingKeys.length; i++) {\n            sortedRows[sortingKeys[i] - 1] = result_text[i];\n        }\n\n        // console.log(sortedRows)\n        sortedRows.map((el, ind_parent, arr_parent) => {\n            const divsRow = [];\n            el.map((el_child, ind_child, arr_child) => {\n                const cycle = (arr_parent.length * 2 - 2) - 1;\n                // console.log(ind_child % 2);\n                if (ind_child === 0) {\n                    // console.log(ind_child, el_child)\n                    for (let i = 0; i < ind_parent; i++) {\n                        divsRow.push(<div className=\"zigzag_cell\"></div>)\n                    }\n                    divsRow.push(<div className=\"zigzag_cell\">{el_child}</div>)\n                }\n                else if (ind_child % 2 && ind_parent !== arr_parent.length - 1) {\n                    // console.log('TYT');\n                    for (let i = 0; i < cycle - ind_parent * 2; i++) {\n                        divsRow.push(<div className=\"zigzag_cell\"></div>)\n                    }\n\n                    divsRow.push(<div className=\"zigzag_cell\">{el_child}</div>)\n                }\n                else if (ind_child % 2 === 0 && ind_parent === 0) {\n                    for (let i = 0; i < cycle - ind_parent * 2; i++) {\n                        divsRow.push(<div className=\"zigzag_cell\"></div>)\n                    }\n                    divsRow.push(<div className=\"zigzag_cell\">{el_child}</div>)\n                }\n                else {\n                    for (let i = 0; i < ind_parent * 2 - 1; i++) {\n                        divsRow.push(<div className=\"zigzag_cell\"></div>)\n                    }\n                    divsRow.push(<div className=\"zigzag_cell\">{el_child}</div>)\n                }\n                if (ind_child === arr_child.length - 1) {\n                    const totalLength = [].concat.apply([], result_text).join('').length;\n                    // console.log('Round', totalLength, divsRow.length)\n                    for (let i = divsRow.length; i < totalLength; i++) {\n                        divsRow.push(<div className=\"zigzag_cell\"></div>)\n                    }\n                }\n            });\n            divs.push(<div className=\"zigzag_row\">{divsRow}</div>)\n        });\n        return divs\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"sample\">\n                    <p>read this please</p>\n                </div>\n                <div className=\"main\">\n                    <div className=\"encrypt_block\">\n\n                        <input placeholder=\"Type plain text\" value={this.state.encrypt.task_text}\n                               onChange={this.updatePlainText}/>\n                        <input placeholder=\"Type key\" value={this.state.encrypt.key} onChange={this.updatePlainKey}/>\n                        <button onClick={() => this.cryptHandler('encrypt')}>Encrypt</button>\n                        {this.state.encrypt.error && <div className=\"error\">{this.state.encrypt.error}</div>}\n                        <div className=\"result_text\">{this.state.encrypt.result_text}</div>\n\n                        <div className=\"zigzag_text\">\n                            {this.state.zigzag_text && this.state.zigzag_text}\n                        </div>\n                    </div>\n                    <div className=\"decrypt_block\">\n                        <input placeholder=\"Type cipher text\" value={this.state.decrypt.task_text}\n                               onChange={this.updateCipherText}/>\n                        <input placeholder=\"Type key\" value={this.state.decrypt.key} onChange={this.updateCipherKey}/>\n                        <button onClick={() => this.cryptHandler('decrypt')}>Decrypt</button>\n                        {this.state.decrypt.error && <div className=\"error\">{this.state.decrypt.error}</div>}\n                        <div className=\"result_text\">{this.state.decrypt.result_text}</div>\n                        <div className=\"zigzag_text\">\n                        </div>\n                    </div>\n                </div>\n                <div className=\"code_examples\">\n                    <div>\n                        <pre>{encrypt_code}</pre>\n                    </div>\n                    <div>\n                        <pre>{recursive_ecrypt}</pre>\n                        <pre>{slice_cipher_ext}</pre>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","export const encrypt_code = `\n    const formatted = text.replace(/ /g, '_').split('');\n    const number_of_rows = key.length;\n    const rows = []\n    for (let i = 0; i < key.length; i++) {\n        rows[i] = []\n    }\n    formatted.map((el, ind, arr) => {\n        const cycle = number_of_rows * 2 - 2;\n        if (ind < arr.length && ind % cycle < cycle) {\n            if (ind % cycle < number_of_rows) {\n                rows[ind % cycle].push(el)\n            }\n            else {\n                rows[cycle - ind % cycle].push(el)\n            }\n        }\n    });\n`;\n\n\nexport const recursive_ecrypt = `\nconst recursiveDecrypt = (plain_text, cipherRows, firstRow = true) => {\n    const totalLength = [].concat.apply([], cipherRows).join('').length;\n    console.log(totalLength)\n    if (firstRow) {\n        for (let i = 0; i < cipherRows.length; i++) {\n            plain_text.push(cipherRows[i][0])\n            cipherRows[i] = cipherRows[i].slice(1)\n        }\n    }\n    else {\n        const tmpSlicedCipherRows = cipherRows.slice(1);\n        for (let i = 0; i < tmpSlicedCipherRows.length; i++) {\n            tmpSlicedCipherRows[i][0] && plain_text.push(tmpSlicedCipherRows[i][0])\n            cipherRows[i + 1] = cipherRows[i + 1] && cipherRows[i + 1].slice(1)\n        }\n    }\n    if (totalLength > 0) {\n        return recursiveDecrypt(plain_text, cipherRows.reverse(), false)\n    }\n};`;\n\nexport const slice_cipher_ext =`\nconst sliceCipherText = (cipher_text, key) => {\n    const result = [];\n    const cycle = key.length * 2 - 2;\n    let rowsLength = [];\n    const firstRowLength = Math.floor(cipher_text.length / cycle);\n\n    const middleRowsLength = Math.floor(cipher_text.length / cycle) * 2;\n    const numberOfMiddleRows = key.length - 2;\n\n    rowsLength.push(firstRowLength);\n    for (let i = 0; i < numberOfMiddleRows; i++) {\n        rowsLength.push(middleRowsLength)\n    }\n    if (cipher_text.length % cycle) {\n        rowsLength = rowsLength.map((el, ind) => {\n            if (ind < cipher_text.length - 1) {\n                el += 1;\n            }\n            return rowsLength[ind] = el;\n        })\n    }\n    const lastRowLength = cipher_text.length - rowsLength.reduce((acc, currentValue)\n        => acc + currentValue);\n    rowsLength.push(lastRowLength);\n\n    const sortingKeys = key.split('');\n    const sortedRowsLength = [];\n    for (let i = 0; i < sortingKeys.length; i++) {\n        sortedRowsLength[i] = rowsLength[sortingKeys[i] - 1];\n    }\n\n\n    sortedRowsLength.reduce((acc, currentValue) => {\n        // console.log(acc)\n        const row = cipher_text.slice(acc, acc + currentValue);\n        // console.log(row)\n        result.push(row);\n        return acc + currentValue\n    }, 0);\n\n    const sortedResult = [];\n    for (let i = 0; i < sortingKeys.length; i++) {\n        sortedResult[sortingKeys[i] - 1] = result[i];\n    }\n\n    return sortedResult;\n};\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}